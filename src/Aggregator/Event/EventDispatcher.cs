using System;
using System.Collections.Concurrent;
using System.Reflection;
using System.Threading.Tasks;
using Aggregator.Command;

namespace Aggregator.Event
{
    /// <summary>
    /// This class is used by the <see cref="CommandProcessor{TIdentifier, TCommandBase, TEventBase}"/> for dispatching events.
    /// </summary>
    /// <typeparam name="TEventBase">The event base type.</typeparam>
    public class EventDispatcher<TEventBase> : IEventDispatcher<TEventBase>
    {
        private readonly ConcurrentDictionary<Type, MethodInfo> _dispatchEventMethodCache = new ConcurrentDictionary<Type, MethodInfo>();
        private readonly IEventHandlingScopeFactory _eventHandlingScopeFactory;

        /// <summary>
        /// Constructs a new <see cref="EventDispatcher{TEventBase}"/> instance.
        /// </summary>
        /// <param name="eventHandlingScopeFactory">The event handler scope factory.</param>
        public EventDispatcher(IEventHandlingScopeFactory eventHandlingScopeFactory)
        {
            _eventHandlingScopeFactory = eventHandlingScopeFactory ?? throw new ArgumentNullException(nameof(eventHandlingScopeFactory));
        }

        /// <summary>
        /// Called when zero or more events need to be dispatched during the handling of a single command.
        /// </summary>
        /// <param name="events">The events generated by the execution of a single command.</param>
        /// <returns>An awaitable <see cref="Task"/>.</returns>
        public async Task Dispatch(TEventBase[] events)
        {
            foreach (var @event in events ?? Array.Empty<TEventBase>())
            {
                var dispatchEventMethod = _dispatchEventMethodCache.GetOrAdd(@event.GetType(), type =>
                    GetType()
                        .GetMethod(nameof(DispatchEvent), BindingFlags.NonPublic | BindingFlags.Instance)
                        .MakeGenericMethod(type));

                await ((Task)dispatchEventMethod.Invoke(this, new object[] { @event })).ConfigureAwait(false);
            }
        }

        private async Task DispatchEvent<TEvent>(TEvent @event)
        {
            using (var eventHandlingScope = _eventHandlingScopeFactory.BeginScopeFor<TEvent>())
            {
                var handlers = eventHandlingScope.ResolveHandlers();
                foreach (var handler in handlers)
                    await handler.Handle(@event).ConfigureAwait(false);
            }
        }
    }
}
